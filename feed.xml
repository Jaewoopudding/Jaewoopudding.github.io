<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://jaewoopudding.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jaewoopudding.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-01T14:58:50+00:00</updated><id>https://jaewoopudding.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">From Continuous to Discrete: Diffusion Enters Life-Sciences Territory - AI810 Blog Post (20255297)</title><link href="https://jaewoopudding.github.io/blog/2025/From-Continuous-to-Discrete-Diffusion-Enters-Life-Sciences-Territory-AI810-Blog-Post-(20255297)/" rel="alternate" type="text/html" title="From Continuous to Discrete: Diffusion Enters Life-Sciences Territory - AI810 Blog Post (20255297)"/><published>2025-06-01T00:00:00+00:00</published><updated>2025-06-01T00:00:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2025/From-Continuous-to-Discrete:-Diffusion-Enters-Life-Sciences-Territory-AI810-Blog-Post-(20255297)</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2025/From-Continuous-to-Discrete-Diffusion-Enters-Life-Sciences-Territory-AI810-Blog-Post-(20255297)/"><![CDATA[<h1 id="from-continuous-to-discrete-diffusion-enters-life-sciences-territory">From Continuous to Discrete: Diffusion Enters Life-Sciences Territory</h1> <p>Over the last few years, continuous-space diffusion models <d-cite key="ho2020denoising,song2020score"></d-cite> have delivered breakthroughs across multiple modalities—images <d-cite key="rombach2022high"></d-cite>, audio <d-cite key="liu2023audioldm"></d-cite>, even video <d-cite key="ho2022video"></d-cite> —by iteratively denoising Gaussian noise back into data.</p> <p>Diffusion is now entering its second act: extending that same paradigm to discrete data modalities <d-cite key="austin2021structured,sahoo2024simple"></d-cite>. This expansion holds the promise of bringing the same disruptive power to life-science data that continuous diffusion brought to computer vision.</p> <h2 id="why-discrete-diffusion-outshines-autoregression">Why Discrete Diffusion Outshines Autoregression</h2> <p>Discrete diffusion models possess several structural advantages over their main competitor, the autoregressive (AR) family:</p> <ul> <li>Parallel token updates. All positions are refined simultaneously, so inference scales sub-linearly with sequence length.</li> <li>Bidirectional context by construction. A sampler can denoise the tail positions first, then use that information to refine earlier tokens—impossible for strictly causal AR decoders.</li> <li>Reversible decisions. Because tokens are revisited through successive denoising steps, long-range constraints—chemical valence, Watson–Crick base pairing, ring closure—can be enforced post-hoc.</li> </ul> <p>Leveraging these properties, researchers are targeting three high-impact design challenges:</p> <table> <thead> <tr> <th>Application</th> <th>Modelling goal</th> <th>Typical reward signals</th> </tr> </thead> <tbody> <tr> <td><strong>Hit generation &amp; lead optimisation</strong></td> <td>Generate chemically valid graphs/strings that maximise binding affinity, ADMET safety, or docking scores.</td> <td>Docking ΔG, QED, synthesizability, Lipinski flags</td> </tr> <tr> <td><strong>DNA sequence design</strong></td> <td>Optimise ~200-bp enhancer sequences that drive high, cell-type-specific gene expression (e.g., HepG2).</td> <td>MPRA-based activity oracles, chromatin accessibility classifiers</td> </tr> <tr> <td><strong>Protein sequence design</strong></td> <td>Given a backbone conformation, produce amino-acid sequences that fold into it while improving thermodynamic stability (ΔΔG &lt; 0).</td> <td>Learned stability oracles, self-consistency RMSD</td> </tr> </tbody> </table> <h2 id="but-likelihood-alone-wont-get-you-there">…But Likelihood Alone Won’t Get You There</h2> <p>A naïve discrete diffusion model maximizes log-likelihood of the training data—excellent for reproducing what nature has already tried, but ill-suited for discovering sequences that satisfy new functional objectives. In practice the model:</p> <ol> <li>Ignores explicit objectives. Binding affinity, enzymatic turnover, or enhancer activity never appear in the likelihood.</li> <li>Overfits dataset bias. Regions of design space unrepresented in the data—often where the best molecules live—remain unexplored.</li> <li>Collapses under multi-objective trade-offs. Natural-looking but non-functional sequences dominate the sample pool.</li> </ol> <p>To see how the discrete diffusion community is attacking these limitations, we will examine two recent ICLR-25 papers—GenMol and DRAKES—that push discrete diffusion into goal-directed generation for molecules and DNA.</p> <table> <thead> <tr> <th>Model</th> <th>Diffusion backbone</th> <th>Objective-alignment strategy</th> <th>Key tricks</th> </tr> </thead> <tbody> <tr> <td><strong>GenMol</strong></td> <td>Masked Discrete Language Model (MDLM) style diffusion</td> <td><em>Test-time</em> remasking &amp; denoising guided by an internal scoring head</td> <td>Fragment remasking, Molecular-Context Guidance (MCG)</td> </tr> <tr> <td><strong>DRAKES</strong></td> <td>Gumbel-softmax CTMC diffusion</td> <td><em>Training-time</em> reward finetuning via direct reward finetuning</td> <td>KL control for preserving naturality</td> </tr> </tbody> </table> <p>These papers illustrate complementary philosophies:</p> <p>GenMol keeps the base model frozen and injects guidance during inference, amortising nothing. DRAKES invests computation during finetuning to bake the reward into the generator, enabling cheaper deployment.</p> <h2 id="a-glimpse-across-continuous-diffusion-and-llms">A Glimpse Across Continuous Diffusion and LLMs</h2> <p>The tension between likelihood training and task rewards is hardly unique to discrete diffusion. In both continuous diffusion and large language models (LLMs), researchers have explored three broad families of solutions:</p> <table> <thead> <tr> <th>Family</th> <th>Core idea</th> <th>Pros</th> <th>Cons</th> </tr> </thead> <tbody> <tr> <td><strong>RL finetuning</strong> <d-cite key="black2023training,ouyang2022training"></d-cite></td> <td>Treat sampling as a Markov Decision Process; optimise an external reward with policy-gradient or Q-learning variants.</td> <td>Universally applicable, strong theoretical footing</td> <td>Requires proxy reward model; high variance; mode collapse risk</td> </tr> <tr> <td><strong>Direct Policy Optimization</strong> <d-cite key="rafailov2023direct,wallace2024diffusion"></d-cite></td> <td>Minimise a KL-regularised contrastive loss that pushes up the log-probability of high-reward (or preferred) samples against low-reward ones in an offline setting.</td> <td>Stable, simpler than vanilla RL, no reward proxy model</td> <td>Zero exploration due to offline property</td> </tr> <tr> <td><strong>Test-time guidance</strong> <d-cite key="snell2024scaling,ma2025inference"></d-cite></td> <td>Modify the sampler (classifier guidance, score distillation, speculative decoding) without touching base weights.</td> <td>No retraining; amortised cost only at inference</td> <td>Extra decoding passes; limited by oracle accuracy</td> </tr> </tbody> </table> <p>In the sections that follow we dive into GenMol and DRAKES, dissect how each integrates rewards into discrete diffusion, and draw lessons for building the next generation of goal-oriented generative models in life sciences.</p> <h1 id="genmol-a-drug-discovery-generalist-with-discrete-diffusion">GenMol: A Drug Discovery Generalist with Discrete Diffusion</h1> <h2 id="motivation">Motivation</h2> <p>Fragment-Based Drug Design (FBDD) has become a workhorse in both pharma and biotech because it lets chemists <strong>grow or link small, experimentally validated fragments</strong> into potent leads while keeping synthetic routes short.<br/> Yet most generative models still operate at the <strong>atom–bond graph</strong> level or on canonical SMILES strings. This brings three pain points:</p> <ol> <li><strong>Semantic mismatch.</strong> Atom-level tokens ignore medicinal-chemistry priors—ring systems, hetero-substituted aromatics, privileged scaffolds—that chemists actually manipulate.</li> <li><strong>Combinatorial drag.</strong> Autoregressive (AR) SMILES generators explore chemical space token-by-token; fragment substitutions that appear near the <em>end</em> of the string are never “seen” when earlier tokens are chosen.</li> <li><strong>Task fragmentation.</strong> Separate models or costly re-training are typically required for de-novo enumeration, scaffold decoration, fragment linking, and reward-guided optimisation.</li> </ol> <p>GenMol tackles these issues head-on by unifying <strong>masked discrete diffusion</strong> with the <em>Structure-Aware Fragment Encoding</em> (<strong>SAFE</strong>)<d-cite key="noutahi2024gotta"></d-cite> representation:</p> <ul> <li><strong>SAFE Strings.</strong> Each token is a <em>chemically meaningful fragment</em> whose identity does <strong>not</strong> depend on permutation or attachment order, eliminating SMILES grammar headaches and yielding a vocabulary aligned with medicinal-chemistry intuition.</li> <li><strong>Bidirectional masked diffusion.</strong> Unlike AR decoders, GenMol refines <strong>all</strong> fragment tokens in parallel. The sampler can therefore denoise the tail fragments first—honouring global constraints such as valence balance or docking hotspots—and then revisit earlier fragments to ensure compatibility.</li> <li><strong>Single checkpoint, multi-task.</strong> A single GenMol model, trained once on a large SAFE corpus, can be steered at inference time—via Molecular-Context Guidance or external rewards—across the full fragment-based design workflow.</li> </ul> <p>In short, GenMol is motivated by the need for a <strong>chemistry-aligned, task-agnostic generator</strong> that preserves the empirical strengths of FBDD while exploiting the global context and parallelism that discrete diffusion uniquely offers.</p> <hr/> <h2 id="methods">Methods</h2> <h3 id="1-masked-discrete-diffusion">1 Masked discrete diffusion</h3> <p>GenMol Training objective minimizes the non-equilibrium ELBO from MDLM <d-cite key="sahoo2024simple"></d-cite>:</p> \[\mathcal{L}_{\text{NELBO}} = \mathbb{E}_{q}\!\Bigg[ \int_{0}^{1} \frac{\alpha_t'}{1-\alpha_t} \sum_{l} \log\!\big\langle x_{\theta,l}(z_t,t),\,x_l \big\rangle \, dt \Bigg].\] <p>Here (z<em>t) is a partially masked SAFE sequence at continuous time (t); (\alpha_t) is the masking schedule.<br/> During sampling, _all</em> masked indices are updated in parallel:</p> \[p_\theta^{(l)}\!\bigl(z_s \mid z_t\bigr) = \operatorname{Cat}\!\Biggl[ 1-\alpha_s\,m + (\alpha_s-\alpha_t)\; \frac{ \exp\!\bigl(\tfrac{1}{\tau}\, \log x_{\theta,l}(z_t,t)\bigr) }{ \displaystyle \sum_{j} \exp\!\bigl(\tfrac{1}{\tau}\, \log x_{\theta,l}^{(j)}(z_t,t)\bigr) } \Biggr],\] <p>where \(\tau\) is the soft-max temperature.</p> <h3 id="2molecular-context-guidance-mcg">2 Molecular-Context Guidance (MCG)</h3> <p>MCG borrows the spirit of classifier-free guidance in image diffusion but removes the need for an <strong>external</strong> property predictor.<br/> Instead, GenMol trains <strong>two views of the <em>same</em> denoiser</strong> in a multi-task fashion:</p> <table> <thead> <tr> <th>View</th> <th>Conditioning tokens</th> <th>Role</th> </tr> </thead> <tbody> <tr> <td><strong>Context-aware head</strong> \(x_\theta^{\text{ctx}}\)</td> <td>full SAFE string <strong>plus</strong> an auxiliary <em>context vector</em> \(c\) (e.g. fragment bag-of-words, docking hotspot mask, scaffold type)</td> <td>Learns to reconstruct fragments that are globally consistent with \(c\).</td> </tr> <tr> <td><strong>Context-free head</strong> \(x_\theta\)</td> <td>SAFE string <strong>only</strong>, drop the context vector (replace with <code class="language-plaintext highlighter-rouge">\&lt;no_ctx\&gt;</code> token)</td> <td>Learns the unconditional data distribution.</td> </tr> </tbody> </table> <p>During <strong>training</strong> the two heads share all transformer layers except the final projection, so extra parameters are negligible.<br/> At <strong>sampling</strong> time we blend the two logits:</p> <div align="center"> \[ \log x*\theta^{(w)}(z_t,t,c) \;=\; w\;\log x*\theta(z*t,t)\;+\; (1-w)\;\log x*\theta^{\text{ctx}}(z_t,t,c), \tag{4} \] </div> <ul> <li>\(w\in[0,1]\) is the <strong>guidance weight</strong>.</li> <li>\(w\!\downarrow\) → pure, unbiased samples; \(w\!\uparrow\) → context-faithful but potentially lower diversity.</li> <li>Because both heads live in the same network, the blend costs <strong>one</strong> forward pass—no extra GPU memory, no back-prop, no separate classifier.</li> </ul> <h3 id="3confidence-based-sampling">3 Confidence-Based Sampling</h3> <p>Standard diffusion would resample <strong>every</strong> mask at every step, frequently overwriting good predictions. GenMol instead adopts <strong>confidence sampling</strong> <d-cite key="chang2022maskgit"></d-cite> with three hyper-parameters \((N,\tau,r)\). For each still-masked position \(l\) at reverse-time \(t\):</p> <ol> <li> <p><strong>Predict a token.</strong><br/> Apply the soft-max with temperature \(\tau\) to the mixed logits from Eq. (4) and sample an index \(i^\ast\) for each still-masked position \(l\).</p> </li> <li> <p><strong>Compute a confidence score</strong> that blends model certainty with controllable exploration:</p> \[c_t^{(l)} \;=\; \log p_{\theta,i^\ast}^{(l)} \;+\; r\,t\,\varepsilon, \qquad \varepsilon \sim \text{Gumbel}(0,1) \tag{8}\] <p>Here \(p_{\theta,i^\ast}^{(l)}\) is the model’s probability for the sampled category at time step \(t\),<br/> while the additive Gumbel noise \(\varepsilon\) is <strong>scaled by \(r\,t\)</strong>—large and exploratory in early iterations, then cooling off as \(t \!\downarrow\) to make late steps increasingly deterministic.</p> </li> <li> <p><strong>Freeze the confident tokens.</strong><br/> Rank all still-masked positions by their \(c*t^{(l)}\) scores and permanently unmask the top \(N\); the remainder stay masked for the next reverse-diffusion step. Effectively, GenMol makes a _parallel* guess for every fragment, then “commits” only the most confident ones.<br/> The procedure repeats until no masks remain, yielding:</p> </li> </ol> <ul> <li><strong>Quality–speed trade-off.</strong><br/> Larger \(N\) or smaller \(\tau\) reduces steps (faster) but can hurt quality; higher randomness \(r\) broadens exploration.<br/> Appendix B shows that \(N\!=\!1,\;\tau\!=\!0.5,\;r\!=\!0.5\) attains the best validity/quality balance, while \(N\!=\!3\) triples speed with only moderate quality loss.</li> <li><strong>Context sensitivity.</strong><br/> Because only high-confidence positions freeze, later denoising rounds can adapt earlier uncertain fragments to satisfy long-range chemistry constraints, a capability AR models lack.</li> </ul> <hr/> <h2 id="experiments">Experiments</h2> <p>GenMol is trained <strong>once</strong> on the SAFE corpus and then reused <em>unchanged</em> across four evaluations.</p> <ul> <li> <p><strong>De-novo generation (ZINC-250k).</strong><br/> With \(N=1,\;\tau=0.5,\;r=0.5\), GenMol achieves 100 % validity, 99.7 % uniqueness, and pushes the “quality” metric (valid ∧ drug-like ∧ synthesizable) to <strong>84.6 %</strong>, far above SAFE-GPT’s 54.7 %, while sampling faster.</p> </li> <li> <p><strong>Fragment-constrained generation (10 FDA drugs).</strong><br/> Across five constraint tasks, GenMol lifts success rates by 5–16 pp and maintains ≥ 96 % validity, outperforming SAFE-GPT on every metric–task pair.</p> </li> <li> <p><strong>Goal-directed hit generation (23 PMO targets).</strong><br/> Fragment remasking + MCG delivers the top-10 AUC on 19 / 23 targets and the highest summed AUC across all baselines (REINVENT, Graph-GA, BO, etc.).</p> </li> <li> <p><strong>Lead optimisation (docking vs. PARP1, BRAF, JAK2, …).</strong><br/> Starting from experimental seeds, GenMol lowers docking energies by up to <strong>3 kcal·mol⁻¹</strong> relative to seeds and surpasses GA-based optimisers on four of six proteins.</p> </li> </ul> <p>All optimisation runs execute on <strong>a single GPU</strong> with no additional fine-tuning, underscoring the practicality of masked discrete diffusion paired with fragment-level exploration.</p> <hr/> <h1 id="fine-tuning-discrete-diffusion-models-via-reward-optimization-with-applications-to-dna-and-protein-design">Fine-Tuning Discrete Diffusion Models via Reward Optimization with Applications to DNA and Protein Design</h1> <h2 id="motivation-1">Motivation</h2> <p>State-of-the-art <strong>masked <em>discrete diffusion</em></strong> models already learn an excellent <em>prior</em> over biological sequences (DNA enhancers, proteins, even text) by running a <strong>continuous-time Markov chain (CTMC)</strong> <d-cite key="campbell2022continuous"></d-cite>that randomly <em>masks</em> tokens and then denoises them.<br/> Yet real design tasks demand <strong>pushing samples toward explicit rewards</strong>—expression level, folding stability, toxicity control—<em>without destroying that powerful diffusion prior</em>. Naïve reward-only fine-tuning breaks down: the model “reward-hacks”, drifts OOD, and loses validity.</p> <p><strong>DRAKES</strong> tackles this by casting <em>fine-tuning of a discrete-diffusion model itself</em> as a <strong>continuous-time RL problem</strong> that <strong>maximises reward <em>and</em> keeps the generator close (in KL) to the original diffusion kernel</strong>. The outcome: sequences that stay “natural-like” while reaching much higher task scores.</p> <hr/> <h2 id="methods-1">Methods</h2> <h3 id="1continuous-time-rl-on-a-discrete-diffusion-generator">1 Continuous-time RL on a Discrete-Diffusion Generator</h3> <p>Start from a pre-trained <strong>masked discrete-diffusion CTMC</strong> with transition rates \(Q^{\text{pre}}(t)\).<br/> We search for new rates \(Q^\theta(t)\) that solve</p> \[\theta^*=\arg \max_{\theta\in\Theta}\mathbb E_{x_{0:T}\sim P^\theta}[r(x_T)]-\alpha \mathbb E_{x_{0:T}\sim P^\theta} \left[ \int_{t=0} ^T\sum_{y\neq x_t }\left( Q^{\theta_{pre}}_{x_t,y}(t)-Q^\theta_{x_t,y}(t) + Q^\theta_{x_t,y}(t)\log\frac{Q^\theta_{x_t,y}(t)}{Q^{\theta_{pre}}_{x_t,y}(t)} \right)dt \right]\] <p><em>Because the base generator is itself a CTMC discrete diffusion, this KL is computed <strong>at every infinitesimal denoising step</strong>, directly regularising the entire diffusion path.</em><br/> At optimum the terminal distribution is the <strong>exponentially tilted diffusion prior</strong></p> \[p^\star_t(x)\;\propto\; \exp(V_t(x)/\alpha)p_t^{pre}(x),\] <p>so the original diffusion manifold is preserved while reward is boosted.</p> <h3 id="2direct-reward-backpropagation-with-gumbel-softmax-drakes">2 Direct Reward bAcKpropagation with gumbEl Softmax (DRAKES)</h3> <table> <thead> <tr> <th>Stage</th> <th>Discrete-diffusion angle</th> <th>Details</th> </tr> </thead> <tbody> <tr> <td><strong>Sampling</strong></td> <td>Make CTMC <em>diffusion</em> trajectories differentiable</td> <td>Replace every discrete fragment-token hop with a <strong>Gumbel–Softmax</strong> relaxation, so gradients propagate through the diffusion steps.</td> </tr> <tr> <td><strong>Optimisation</strong></td> <td>Gradient ascent on the RL objective</td> <td>Compute minibatch estimates, back-prop through the <em>relaxed diffusion path</em>, and update (\theta) with Adam. A straight-through trick on the final (hard) denoise step sharpens oracle alignment.</td> </tr> </tbody> </table> <blockquote> <p>All learning happens <em>inside</em> the diffusion model—no separate policy network or value critic is introduced.</p> </blockquote> <h3 id="3theory-links-to-diffusion">3 Theory Links to Diffusion</h3> <ul> <li>The optimal rates satisfy<br/> \(Q^{\theta^*}_{x,y}(t)=Q^{\theta_{pre}}_{x,y}(t)\exp(\{V_t(y)-V_t(x)\}/\alpha)\),<br/> mirroring a <strong>score-matching update</strong> inside the diffusion kernel.</li> <li>Classic <strong>classifier guidance for discrete diffusion</strong> appears as a <em>Doob transform</em> special case; unlike DRAKES it requires no training but omits KL regularisation and underperforms on proteins.</li> </ul> <hr/> <h2 id="experiments-1">Experiments</h2> <p><strong>DRAKES is fine-tuned on a task-specific reward model and evaluated—without further architectural changes—across three very different domains.</strong></p> <ul> <li> <p><strong>DNA enhancer design.</strong><br/> RL fine-tuning boosts the predicted transcriptional <em>activity</em> of generated 200-bp sequences by <strong>≈ 13 %</strong> relative to the strongest baseline, <em>while simultaneously</em> increasing motif fidelity and 3-mer realism.<br/> → Shows that the KL-regularised CTMC keeps samples “natural-like” even under strong reward pressure.</p> </li> <li> <p><strong>Protein inverse folding (Megascale stability set).</strong><br/> The proportion of designed sequences that both <em>fold</em> and remain <em>thermodynamically stable</em> climbs to <strong>78.6 %</strong>, compared with <strong>≈ 64 %</strong> for SMC or TDS guidance.<br/> → Demonstrates that end-to-end back-prop through discrete hops can out-perform search-based guidance.</p> </li> <li> <p><strong>Toxicity-controlled text generation.</strong><br/> Achieves the best mean and median <em>toxicity scores</em> among all contenders (pre-trained diffusion, classifier-guided diffusion, SMC, TDS).<br/> → Confirms that the method generalises beyond biological tokens to natural-language tasks.</p> </li> </ul> <p><em>Ablation studies</em> verify that the trajectory-level KL term is essential for preventing reward hacking, and that the Gumbel-Softmax temperature schedule remains robust over a wide hyper-parameter range.</p> <hr/> <h1 id="shared-underlying-techniques">Shared Underlying Techniques</h1> <table> <thead> <tr> <th>Core element</th> <th><strong>GenMol</strong></th> <th><strong>DRAKES</strong></th> <th>Shared benefit</th> </tr> </thead> <tbody> <tr> <td><strong>Forward (noise) step</strong></td> <td>Randomly <strong>mask</strong> SAFE-fragments → continuous-time CTMC</td> <td>Randomly <strong>mask</strong> sequence tokens → CTMC</td> <td>Equivalent to a continuous-time BERT-MLM objective</td> </tr> <tr> <td><strong>Reverse (denoising) step</strong></td> <td>Transformer predicts <em>all</em> fragments <strong>in parallel</strong> (non-autoregressive)</td> <td>Same parallel token restoration</td> <td>Length flexibility, fast sampling, order invariance</td> </tr> </tbody> </table> <blockquote> <p><strong>In short:</strong> Both papers extend the BERT masking idea to continuous time, yielding <em>masked discrete diffusion</em> models that inherit parallel decoding and amenability to gradient guidance.</p> </blockquote> <hr/> <h1 id="different-design-choices--trade-offs">Different Design Choices &amp; Trade-offs</h1> <table> <thead> <tr> <th>Perspective</th> <th><strong>GenMol</strong> <em>(fragment-based drug design)</em></th> <th><strong>DRAKES</strong> <em>(biology &amp; text reward tuning)</em></th> </tr> </thead> <tbody> <tr> <td><strong>Primary goal</strong></td> <td>“<strong>One-shot pre-train, multi-task zero-shot</strong>” exploration (de-novo, fragment linking, scaffold decoration, etc.)</td> <td><strong>Fine-tune for explicit rewards</strong> (enhancer activity, protein stability, toxicity control)</td> </tr> <tr> <td><strong>Guidance method</strong></td> <td><em>Molecular-Context Guidance</em> (logit blending) + reward-free fragment remasking</td> <td>Gumbel-Softmax relaxation enables <strong>direct reward-gradient back-prop</strong></td> </tr> <tr> <td><strong>Supervision signal</strong></td> <td>Large SAFE corpus only; <em>no</em> reward model required</td> <td>Requires an <strong>external reward/oracle</strong>; RL fine-tuning with trajectory-level KL</td> </tr> <tr> <td><strong>Naturalness guarantee</strong></td> <td>Uses the original fragment prior; chemically meaningful SAFE tokens ensure synthesizability</td> <td>Adjustable α-weighted KL keeps samples near the pretrained prior</td> </tr> <tr> <td><strong>Representation unit</strong></td> <td><strong>Chemistry fragments (SAFE)</strong> → embeds medicinal-chemistry priors</td> <td>Generic <strong>tokens</strong> (bases / amino acids / words) → domain-agnostic</td> </tr> <tr> <td><strong>Sampling strategy</strong></td> <td>Confidence-freezing + fragment remasking → rapid local edits</td> <td>Standard CTMC sampling with reward gradients influencing every hop</td> </tr> <tr> <td><strong>Compute cost</strong></td> <td>Single pre-training run; inference light (1 GPU)</td> <td>Extra fine-tuning epochs with Gumbel-Softmax back-prop (heavier GPU demand)</td> </tr> </tbody> </table> <h1 id="conclusion-and-discussion">Conclusion and Discussion</h1> <p>Discrete diffusion is rapidly emerging as a unifying framework for goal-oriented generation in the life sciences. GenMol shows that a single masked-diffusion prior over chemistry fragments can serve as a versatile, medicinal-chemistry-aligned generator, while DRAKES demonstrates that the same mathematical engine can be reward-tuned—without sacrificing validity—to meet demanding objectives in DNA, proteins, and even natural-language sequences.</p> <p>However, applying diffusion to real biological design problems is still in its infancy, and much work lies ahead. My conjecture on this research area is that test-time scaling will become critically important for life science. The domains we care about—drug discovery, synthetic biology, protein engineering—often require extremely expensive evaluation protocols (wet-lab assays, in-vitro and in-vivo studies). Inference-time computation is cheap by comparison, but it must become cheaper still so we can explore vast design spaces before committing to physical validation. A promising path is to import test-time computation strategies proven indispensable in modern language modelling—speculative decoding, draft-and-refine loops, classifier-free or hybrid guidance—and adapt them to discrete diffusion in the scientific setting.</p>]]></content><author><name>Jaewoo Lee</name></author><summary type="html"><![CDATA[Discrete diffusion models have recently leapt from continuous data such as images to discrete biological sequences, promising a new wave of goal-directed design for molecules, DNA, and proteins. This post surveys two ICLR-25 highlights: GenMol, which pairs a fragment-level masked-diffusion prior with light-weight test-time guidance to excel at drug-discovery tasks, and DRAKES, which casts diffusion fine-tuning as continuous-time reinforcement learning to optimise explicit rewards while staying close to the data prior. By contrasting their objectives, algorithms, and trade-offs, we expose a set of shared techniques—continuous-time masking, parallel token restoration, and KL-anchoring—that underpin both successes. We conclude that future progress hinges on aggressive test-time scaling: importing fast inference strategies from language modelling to cheaply explore vast design spaces before expensive wet-lab validation.]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://jaewoopudding.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://jaewoopudding.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://jaewoopudding.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry><entry><title type="html">a post with geojson</title><link href="https://jaewoopudding.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="a post with geojson"/><published>2024-01-26T17:57:00+00:00</published><updated>2024-01-26T17:57:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/geojson-map/"><![CDATA[<p>This is an example post with some <a href="https://geojson.org/">geojson</a> code. The support is provided thanks to <a href="https://leafletjs.com/">Leaflet</a>. To create your own visualization, go to <a href="https://geojson.io/">geojson.io</a>.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><category term="maps"/><summary type="html"><![CDATA[this is what included geojson code could look like]]></summary></entry><entry><title type="html">a post with echarts</title><link href="https://jaewoopudding.github.io/blog/2024/echarts/" rel="alternate" type="text/html" title="a post with echarts"/><published>2024-01-26T16:03:00+00:00</published><updated>2024-01-26T16:03:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/echarts</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/echarts/"><![CDATA[<p>This is an example post with some <a href="https://echarts.apache.org/">echarts</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">echarts
</span><span class="sb">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-echarts">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}
</code></pre> <p>Note that this library offer support for both light and dark themes. You can switch between them using the theme switcher in the top right corner of the page.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included echarts code could look like]]></summary></entry><entry><title type="html">a post with chart.js</title><link href="https://jaewoopudding.github.io/blog/2024/chartjs/" rel="alternate" type="text/html" title="a post with chart.js"/><published>2024-01-26T01:04:00+00:00</published><updated>2024-01-26T01:04:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2024/chartjs</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2024/chartjs/"><![CDATA[<p>This is an example post with some <a href="https://www.chartjs.org/">chart.js</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-chartjs">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-chartjs">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included chart.js code could look like]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="https://jaewoopudding.github.io/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2023/tikzjax</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="https://jaewoopudding.github.io/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography"/><published>2023-07-12T13:56:00+00:00</published><updated>2023-07-12T13:56:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2023/post-bibliography</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2023/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. We support every citation style that <a href="https://github.com/inukshuk/jekyll-scholar">jekyll-scholar</a> does. That means simple citation like (missing reference), multiple citations like (missing reference), long references like (missing reference) or also quotes:</p> <blockquote><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br/>sed do eiusmod tempor.</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing.</p><cite>(missing reference)</cite></blockquote> <p>If you would like something more academic, check the <a href="/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="bib"/><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://jaewoopudding.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://jaewoopudding.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://jaewoopudding.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
<span class="cp">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'assets/jupyter/blog.ipynb'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">relative_url</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">file_exists</span><span class="w"> </span>assets/jupyter/blog.ipynb<span class="w"> </span><span class="cp">%}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">notebook_exists</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s1">'true'</span><span class="w"> </span><span class="cp">%}</span>
  <span class="cp">{%</span><span class="w"> </span><span class="nt">jupyter_notebook</span><span class="w"> </span><span class="nv">jupyter_path</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">else</span><span class="w"> </span><span class="cp">%}</span>
  &lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
<span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry></feed>